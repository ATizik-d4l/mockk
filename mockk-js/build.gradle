buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'com.moowork.node'

repositories {
    mavenCentral()
}

dependencies {
    expectedBy project(":mockk-common")
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    testCompile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
    compile project(":mockk-dsl-js")
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from(project(':mockk-common').sourceSets.main.allSource) {
        exclude "io/mockk/impl/InternalPlatform.kt"
    }
}

artifacts {
    archives sourcesJar
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "commonjs"
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task patchMockJSTest(dependsOn: [compileTestKotlin2Js]) {
    def output = new File(compileTestKotlin2Js.outputFile.absolutePath.replace(".js", "_patched.js"))
    inputs.file(compileTestKotlin2Js.outputFile)
    outputs.file(output)

    def testLines = compileTestKotlin2Js.outputFile.readLines().collect {
        it.replaceAll(
                "var CoroutineImpl_0 = Kotlin.kotlin.coroutines.experimental.CoroutineImpl;",
                'var CoroutineImpl_0 = Kotlin.kotlin.coroutines.experimental.CoroutineImpl; var CoroutineImpl = CoroutineImpl_0;'
        )
    }
    output.write(testLines.join("\n"))
}

task runMocha(type: NodeTask, dependsOn: [patchMockJSTest, compileTestKotlin2Js, populateNodeModules, installMocha]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [patchMockJSTest.outputs.files[0]]
}

test.dependsOn runMocha

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (project.hasProperty('localrepo')) {
                repository(url: "file://" + rootProject.properties['localrepo'] ?: '')
            } else {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: rootProject.properties['ossrhUsername'] ?: '', password: rootProject.properties['ossrhPassword'] ?: '')
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: rootProject.properties['ossrhUsername'] ?: '', password: rootProject.properties['ossrhPassword'] ?: '')
                }
            }

            pom.project {
                name 'MockK JS'
                packaging 'jar'
                description 'mocking library for Kotlin (JS)'
                url 'http://mockk.io'

                scm {
                    connection 'scm:git:git@github.com:mockk/mockk.git'
                    developerConnection 'scm:git:git@github.com:mockk/mockk.git'
                    url 'http://www.github.com/mockk/mockk/'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id 'oleksiyp'
                        name 'Oleksii Pylypenko'
                        email 'oleksiy.pylypenko@gmail.com'
                    }
                }
            }
        }
    }
}

